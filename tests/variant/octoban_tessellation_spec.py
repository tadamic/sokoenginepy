from sokoengine import Direction, AtomicMove
from sokoengine.variant.tessellation import Tessellation
from sokoengine.variant.octoban_tessellation import OctobanTessellation
from helpers import TessellationSpecMixin
from autogenerated import OctobanTessellationAutogeneratedSpecMixin
from hamcrest import assert_that, equal_to


class DescribeOctobanTessellation(
    TessellationSpecMixin, OctobanTessellationAutogeneratedSpecMixin
):

    illegal_directions = []

    legal_directions = [
        Direction.LEFT, Direction.RIGHT, Direction.UP, Direction.DOWN,
        Direction.NORTH_WEST, Direction.NORTH_EAST,
        Direction.SOUTH_WEST, Direction.SOUTH_EAST,
    ]

    legal_moves = [
        AtomicMove(Direction.LEFT, False),
        AtomicMove(Direction.RIGHT, False),
        AtomicMove(Direction.UP, False),
        AtomicMove(Direction.DOWN, False),
        AtomicMove(Direction.NORTH_WEST, False),
        AtomicMove(Direction.NORTH_EAST, False),
        AtomicMove(Direction.SOUTH_WEST, False),
        AtomicMove(Direction.SOUTH_EAST, False),
        AtomicMove(Direction.LEFT, True),
        AtomicMove(Direction.RIGHT, True),
        AtomicMove(Direction.UP, True),
        AtomicMove(Direction.DOWN, True),
        AtomicMove(Direction.NORTH_WEST, True),
        AtomicMove(Direction.NORTH_EAST, True),
        AtomicMove(Direction.SOUTH_WEST, True),
        AtomicMove(Direction.SOUTH_EAST, True)
    ]

    legal_characters = [
        'l', 'r', 'u', 'd', 'w', 'n', 's', 'e',
        'L', 'R', 'U', 'D', 'W', 'N', 'S', 'E'
    ]

    tessellation = Tessellation.factory('Octoban')

    class Describe_graph_type(object):
        def test_is_directed(self):
            assert_that(
                OctobanTessellation().graph_type().is_directed(),
                equal_to(True)
            )


        def test_doesnt_allow_parallel_edges(self):
            assert_that(
                OctobanTessellation().graph_type().is_multigraph(),
                equal_to(False)
            )
