<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md__home_tomislav_dev_personal_sokoban_sokoenginepy_lib_libsokoengine_INSTALL" kind="page">
    <compoundname>md__home_tomislav_dev_personal_sokoban_sokoenginepy_lib_libsokoengine_INSTALL</compoundname>
    <title>Install</title>
    <detaileddescription>
<para><heading level="2">Runtime dependencies</heading>
</para><para><programlisting><codeline><highlight class="normal">$<sp/>sudo<sp/>apt<sp/>install<sp/>libboost-graph</highlight></codeline>
</programlisting></para><para><heading level="2">Compile time dependencies</heading>
</para><para><ulink url="http://git-scm.com/">git</ulink>, <ulink url="http://www.gnu.org/software/make/">make</ulink>, recent C++ compiler with C++11 support, <ulink url="http://www.boost.org/">boost</ulink> and <ulink url="http://www.cmake.org">CMake</ulink></para><para><programlisting><codeline><highlight class="normal">$<sp/>sudo<sp/>apt<sp/>install<sp/>git<sp/>build-essential<sp/>libboost-graph-dev<sp/>cmake<sp/>libdw-dev<sp/>\</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>binutils-dev<sp/>doxygen</highlight></codeline>
</programlisting></para><para>There are also few dependencies that <ulink url="http://www.cmake.org">CMake</ulink> pulls automatically from GutHub during build:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/ryanhaining/cppitertools">cppitertools</ulink></para></listitem><listitem><para><ulink url="https://github.com/bombela/backward-cpp">backward-cpp</ulink></para></listitem><listitem><para><ulink url="http://pybind11.readthedocs.io/en/stable/index.html">pybind11</ulink></para></listitem></itemizedlist>
</para><para><heading level="2">Compile and install</heading>
</para><para>Clone repo:</para><para><programlisting><codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>https://github.com/tadams42/sokoenginepy.git</highlight></codeline>
</programlisting></para><para>Configure sources:</para><para><programlisting><codeline><highlight class="normal">$<sp/>cd<sp/>lib/libsokoengine<sp/>&amp;&amp;<sp/>mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cmake<sp/>../</highlight></codeline>
</programlisting></para><para>Build and install:</para><para><programlisting><codeline><highlight class="normal">$<sp/>make<sp/>&amp;&amp;<sp/>make<sp/>install</highlight></codeline>
</programlisting></para><para><heading level="2">Customizing build</heading>
</para><para><ulink url="http://www.cmake.org">CMake</ulink> accepts compile options in the form of:</para><para><programlisting><codeline><highlight class="normal">$<sp/>cmake<sp/>-DOPTION_NAME=OPTION_VALUE</highlight></codeline>
</programlisting></para><para>For <computeroutput>libsokoengine</computeroutput>, these are probably most usable ones:</para><para><itemizedlist>
<listitem><para><computeroutput>CMAKE_INSTALL_PREFIX</computeroutput><itemizedlist>
<listitem><para>string, default: <computeroutput>/usr/local</computeroutput></para></listitem><listitem><para>allowed values: platform dependent</para></listitem></itemizedlist>
</para></listitem><listitem><para><computeroutput>CMAKE_BUILD_TYPE</computeroutput><itemizedlist>
<listitem><para>string, default: <computeroutput>Release</computeroutput></para></listitem><listitem><para>allowed values: [<computeroutput>RelWithDebInfo</computeroutput>, <computeroutput>Debug</computeroutput>, <computeroutput>Release</computeroutput>, <computeroutput>MinSizeRel</computeroutput>]</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">$<sp/>cmake<sp/>-DCMAKE_INSTALL_PREFIX=&quot;/tmp&quot;<sp/>-DCMAKE_BUILD_TYPE=&quot;Debug&quot;</highlight></codeline>
</programlisting></para><para><heading level="2">Integrating with other projects through <ulink url="http://www.cmake.org">CMake</ulink></heading>
</para><para><computeroutput>liboskoengine</computeroutput> installs everything needed to be used in <ulink url="http://www.cmake.org">CMake</ulink> projects including <ulink url="https://cmake.org/cmake/help/latest/manual/cmake-packages.7.html#using-packages">CMake Config-Package</ulink>. Minimal project for <ulink url="http://www.cmake.org">CMake</ulink> would look like this:</para><para><programlisting><codeline><highlight class="normal">cmake_minimum_required<sp/>(VERSION<sp/>2.8.12)</highlight></codeline>
<codeline><highlight class="normal">project(test_libsokoengine)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">find_package(sokoengine<sp/>0.4<sp/>REQUIRED)</highlight></codeline>
<codeline><highlight class="normal">add_executable(tester<sp/>main.cpp)</highlight></codeline>
<codeline><highlight class="normal">target_link_libraries(<sp/>tester<sp/>sokoengine<sp/>)</highlight></codeline>
</programlisting></para><para><heading level="2">Python bindings</heading>
</para><para>All <computeroutput>libsokoengine</computeroutput> classes are exposed to Python using <ulink url="http://pybind11.readthedocs.io/en/stable/index.html">pybind11</ulink>. To compile Python bindings:</para><para><programlisting><codeline><highlight class="normal">$<sp/>make<sp/>sokoenginepyext</highlight></codeline>
</programlisting></para><para>Which will produce shred library importable in Python:</para><para><programlisting><codeline><highlight class="normal">import<sp/>sokoenginepyext</highlight></codeline>
</programlisting></para><para><heading level="2">Tests</heading>
</para><para>All tests are written in Python.</para><para>To run tests, install [sokoenginepy] (which will also build <computeroutput>sokoenginepyext</computeroutput>) and run Python test suite.</para><para>For details see: <ulink url="http://sokoenginepy.readthedocs.io/en/latest/development.html">http://sokoenginepy.readthedocs.io/en/latest/development.html</ulink></para><para><heading level="2">Other <ulink url="http://www.gnu.org/software/make/">make</ulink> targets</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput>benchmarks</computeroutput> - a suite of benchmarks for <computeroutput>Mover</computeroutput></para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">$<sp/>make<sp/>benchmarks</highlight></codeline>
<codeline><highlight class="normal">$<sp/>./bin/benchmarks/benchmarks</highlight></codeline>
</programlisting></para><para><itemizedlist>
<listitem><para><computeroutput>valgrind_profile_playground</computeroutput> - a profiling data generator</para></listitem></itemizedlist>
</para><para><programlisting><codeline><highlight class="normal">$<sp/>sudo<sp/>apt<sp/>install<sp/>kcachegrind<sp/>valgrind</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>valgrind_profile_playground</highlight></codeline>
<codeline><highlight class="normal">$<sp/>kcachegrind<sp/>playground_dump.pid</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
