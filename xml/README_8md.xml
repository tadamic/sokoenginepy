<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>libsokoengine</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sokoban<sp/>and<sp/>variants<sp/>game<sp/>engine</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![Version](http://img.shields.io/badge/version-0.5.2-blue.svg)</highlight></codeline>
<codeline><highlight class="normal">[![Language](http://img.shields.io/badge/language-C++11-lightgrey.svg)](http://en.cppreference.com/w/)</highlight></codeline>
<codeline><highlight class="normal">[![License](http://img.shields.io/badge/license-GPLv3-brightgreen.svg)](http://opensource.org/licenses/GPL-3.0)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">C++<sp/>implementation<sp/>of<sp/>classic<sp/>Sokoban<sp/>game<sp/>inspired<sp/>by<sp/>[SokobanYASC],<sp/>[JSoko]<sp/>and<sp/>[MazezaM]<sp/>featuring:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>portable,<sp/>using<sp/>C++11<sp/>and<sp/>[boost]</highlight></codeline>
<codeline><highlight class="normal">-<sp/>supports<sp/>Sokoban,<sp/>Hexoban,<sp/>Trioban<sp/>and<sp/>Octoban<sp/>variants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>Sokoban+<sp/>for<sp/>all<sp/>supported<sp/>variants</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>-<sp/>multiple<sp/>pushers<sp/>(Multiban)<sp/>for<sp/>all<sp/>variants</highlight></codeline>
<codeline><highlight class="normal">-<sp/>fast<sp/>game<sp/>engine<sp/>implementation<sp/>with<sp/>single<sp/>step<sp/>undo/redo</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Optional<sp/>Python<sp/>3<sp/>bindings<sp/>using<sp/>[pybind11]</highlight></codeline>
<codeline><highlight class="normal">-<sp/>TODO:<sp/>self<sp/>sufficient<sp/>-<sp/>clients<sp/>are<sp/>not<sp/>required<sp/>to<sp/>link<sp/>to<sp/>any<sp/>dependencies<sp/>(not<sp/>even<sp/>Boost)<sp/>because<sp/>all<sp/>compile<sp/>time<sp/>dependencies<sp/>are<sp/>either<sp/>header-only<sp/>or<sp/>linked<sp/>statically<sp/>by<sp/>default<sp/>and<sp/>also<sp/>not<sp/>exposed<sp/>in<sp/>own<sp/>libsokoengine<sp/>headers</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Full<sp/>C++<sp/>API<sp/>docs<sp/>are<sp/>available<sp/>at<sp/>http://tadams42.github.io/sokoenginepy/.<sp/>Following<sp/>sections<sp/>describe<sp/>key<sp/>concepts<sp/>of<sp/>library.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[Install](#install)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Usage<sp/>&amp;<sp/>Documentation](#usage-documentation)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Big<sp/>picture<sp/>view](#big-picture-view)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>[Game<sp/>variant](#game-variant)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>[Game<sp/>boards](#game-boards)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>[Game<sp/>logic<sp/>and<sp/>movement](#game-logic-and-movement)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>[Piece<sp/>tracking,<sp/>position<sp/>hashing<sp/>and<sp/>victory<sp/>conditions](#piece-tracking-position-hashing-and-victory-conditions)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>[Game<sp/>snapshots<sp/>and<sp/>movement<sp/>recording](#game-snapshots-and-movement-recording)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[Troubleshooting,<sp/>issues<sp/>and<sp/>bugs](#troubleshooting-issues-and-bugs)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Install</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Detailed<sp/>build<sp/>and<sp/>install<sp/>instructions<sp/>(including<sp/>integration<sp/>with<sp/>your<sp/>[CMake]<sp/>projects,<sp/>etc...)<sp/>are<sp/>in<sp/>[INSTALL.md](INSTALL.md).<sp/>Quick<sp/>summary:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~sh</highlight></codeline>
<codeline><highlight class="normal">$<sp/>git<sp/>clone<sp/>--recursive<sp/>https://github.com/tadams42/sokoenginepy.git</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cd<sp/>sokoenginepy<sp/>&amp;&amp;<sp/>mkdir<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">$<sp/>cmake<sp/>../</highlight></codeline>
<codeline><highlight class="normal">$<sp/>make<sp/>&amp;&amp;<sp/>make<sp/>install</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Usage<sp/>&amp;<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Full<sp/>docs<sp/>can<sp/>be<sp/>generated<sp/>from<sp/>source<sp/>using<sp/>`make<sp/>docs`<sp/>target<sp/>([Doxygen]<sp/>required)<sp/>and<sp/>are<sp/>also<sp/>available<sp/>online<sp/>at<sp/>http://tadams42.github.io/sokoenginepy/.<sp/>Note<sp/>that<sp/>online<sp/>docs<sp/>are<sp/>generated<sp/>from<sp/>`master`<sp/>branch.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Minimal<sp/>example<sp/>`main.cpp`<sp/>is:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;sokoengine.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>sokoengine;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>HexobanBoard<sp/>b;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Big<sp/>picture<sp/>view</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">There<sp/>are<sp/>few<sp/>key<sp/>concepts<sp/>implemented<sp/>by<sp/>library<sp/>and<sp/>explained<sp/>by<sp/>following<sp/>sections.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Game<sp/>variant</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">We<sp/>implement<sp/>four<sp/>game<sp/>variants:<sp/>Sokoban,<sp/>Hexoban,<sp/>Trioban<sp/>and<sp/>Octoban.<sp/>These<sp/>differ<sp/>by<sp/>plane<sp/>tessellation<sp/>on<sp/>which<sp/>game<sp/>board<sp/>is<sp/>laid<sp/>out:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>Sokoban<sp/>boards<sp/>consist<sp/>of<sp/>adjacent<sp/>squares</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Hexoban<sp/>boards<sp/>consist<sp/>of<sp/>adjacent<sp/>hexagons</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Trioban<sp/>boards<sp/>consist<sp/>of<sp/>adjacent<sp/>triangles</highlight></codeline>
<codeline><highlight class="normal">-<sp/>Octoban<sp/>boards<sp/>consist<sp/>of<sp/>interchanging,<sp/>adjacent<sp/>octagons<sp/>and<sp/>squares</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Tessellation<sp/>of<sp/>game<sp/>board<sp/>determines<sp/>available<sp/>moves<sp/>for<sp/>game<sp/>pieces.<sp/>In<sp/>general<sp/>there<sp/>are<sp/>8<sp/>supported<sp/>movement<sp/>directions:<sp/>left,<sp/>right,<sp/>up,<sp/>down,<sp/>north<sp/>west,<sp/>north<sp/>east,<sp/>south<sp/>west<sp/>and<sp/>south<sp/>east.<sp/>Of<sp/>course,<sp/>not<sp/>all<sp/>tessellations<sp/>support<sp/>all<sp/>directions.<sp/>Also,<sp/>one<sp/>set<sp/>of<sp/>directions<sp/>may<sp/>have<sp/>different<sp/>meaning<sp/>in<sp/>different<sp/>tessellations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>abstract<sp/>all<sp/>these<sp/>differences,<sp/>we<sp/>implement<sp/>`Tessellation`<sp/>class,<sp/>with<sp/>subclass<sp/>for<sp/>each<sp/>of<sp/>supported<sp/>variants.<sp/>Instances<sp/>of<sp/>`Tessellation`<sp/>are<sp/>then<sp/>used<sp/>by<sp/>other<sp/>classes<sp/>to<sp/>parameterize<sp/>game<sp/>variant.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>`Tessellation`<sp/>is<sp/>low<sp/>level<sp/>implementation<sp/>detail,<sp/>and<sp/>although<sp/>it<sp/>helps<sp/>to<sp/>be<sp/>aware<sp/>of<sp/>its<sp/>existence,<sp/>client<sp/>code<sp/>doesn&apos;t<sp/>usually<sp/>need<sp/>to<sp/>interact<sp/>with<sp/>it<sp/>directly.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Game<sp/>boards</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Game<sp/>board<sp/>consists<sp/>of<sp/>2D<sp/>grid<sp/>of<sp/>cells.<sp/>Each<sp/>cell<sp/>has<sp/>a<sp/>state<sp/>describing<sp/>its<sp/>board<sp/>element<sp/>(ie.<sp/>wall,<sp/>pusher,<sp/>box,<sp/>goal...)<sp/>and<sp/>can<sp/>have<sp/>some<sp/>additional<sp/>flags<sp/>added<sp/>to<sp/>that<sp/>state.<sp/>These<sp/>flags<sp/>are<sp/>not<sp/>displayed<sp/>but<sp/>are<sp/>used<sp/>internally<sp/>by<sp/>board<sp/>editors,<sp/>movement<sp/>logic,<sp/>etc..<sp/>Board<sp/>elements<sp/>(cells)<sp/>are<sp/>implemented<sp/>by<sp/>`BoardCell`<sp/>class.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Game<sp/>board<sp/>is<sp/>implemented<sp/>using<sp/>`VariantBoard`<sp/>base<sp/>class<sp/>with<sp/>concrete<sp/>implementations<sp/>for<sp/>each<sp/>variant<sp/>(ie.<sp/>`SokobanBoard`,<sp/>`HexobanBoard`,<sp/>etc...).<sp/>For<sp/>speed<sp/>efficiency,<sp/>board&apos;s<sp/>2D<sp/>grid<sp/>can<sp/>be<sp/>thought<sp/>of<sp/>as<sp/>a<sp/>1D<sp/>array<sp/>of<sp/>`BoardCell`.<sp/>This<sp/>means<sp/>that<sp/>most<sp/>methods<sp/>in<sp/>`VariantBoard`<sp/>and<sp/>in<sp/>other<sp/>places<sp/>in<sp/>library,<sp/>use<sp/>1D<sp/>indexes<sp/>to<sp/>reference<sp/>individual<sp/>cells.<sp/>Utility<sp/>functions<sp/>are<sp/>provided<sp/>that<sp/>convert<sp/>2D<sp/>coordinates<sp/>to<sp/>1D<sp/>indexes<sp/>and<sp/>vice<sp/>versa<sp/>(ie.<sp/>`index1d`).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`VariantBoard`<sp/>has<sp/>following<sp/>responsibilities:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>stores<sp/>and<sp/>provides<sp/>reference<sp/>to<sp/>individual<sp/>board<sp/>cells</highlight></codeline>
<codeline><highlight class="normal">-<sp/>manages<sp/>board<sp/>resizing<sp/>(adding/removing<sp/>rows<sp/>and<sp/>columns)<sp/>for<sp/>ie.<sp/>editing<sp/>sessions</highlight></codeline>
<codeline><highlight class="normal">-<sp/>provides<sp/>board-space<sp/>searching<sp/>capabilities<sp/>like<sp/>getting<sp/>neighbor<sp/>cell<sp/>of<sp/>given<sp/>cell,<sp/>detecting<sp/>playable<sp/>area<sp/>of<sp/>board,<sp/>finding<sp/>movement<sp/>path<sp/>between<sp/>two<sp/>points<sp/>for<sp/>either<sp/>pusher<sp/>or<sp/>box,<sp/>etc...<sp/>(internally,<sp/>appropriate<sp/>graph<sp/>structure<sp/>for<sp/>each<sp/>tessellation<sp/>and<sp/>appropriate<sp/>`Tessellation`<sp/>are<sp/>used)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>implements<sp/>`std::string`<sp/>(de)serialization.<sp/>Traditional<sp/>format<sp/>for<sp/>these<sp/>strings<sp/>is<sp/>extended<sp/>to<sp/>support<sp/>RLE<sp/>compression<sp/>of<sp/>them,<sp/>following<sp/>specification<sp/>of<sp/>`SokobanYASC`<sp/>`.sok`<sp/>format.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Following<sp/>is<sp/>some<sp/>example<sp/>code<sp/>for<sp/>`VariantBoard`<sp/>usage:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>construction<sp/>from<sp/>string</highlight></codeline>
<codeline><highlight class="normal">HexobanBoard<sp/>board(string()<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;---#-#-#-#----------\n&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;--#-------#---------\n&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;-#-@-----#----------\n&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;--#-$---$-#-#-#-#-#-\n&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;-#---.---.-+---$---#\n&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;--#---*-----------#-\n&quot;<sp/>+</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&quot;---#-#-#-#-#-#-#-#--\n&quot;</highlight></codeline>
<codeline><highlight class="normal">);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>editing<sp/>and<sp/>cell<sp/>referencing</highlight></codeline>
<codeline><highlight class="normal">board[42].has_pusher();</highlight></codeline>
<codeline><highlight class="normal">board[42]<sp/>=<sp/>BoardCell(&apos;@&apos;);</highlight></codeline>
<codeline><highlight class="normal">const<sp/>BoardCell&amp;<sp/>cell<sp/>=<sp/>board[index_1d(42,<sp/>24,<sp/>board.width())];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>board-space<sp/>searches</highlight></codeline>
<codeline><highlight class="normal">position_t<sp/>pusher_position<sp/>=<sp/>42;</highlight></codeline>
<codeline><highlight class="normal">Positions<sp/>reachable_by_pusher<sp/>=<sp/>board.positions_reachable_by_pusher(pusher_position);</highlight></codeline>
<codeline><highlight class="normal">board.mark_play_area();</highlight></codeline>
<codeline><highlight class="normal">position_t<sp/>neighbor<sp/>=<sp/>board.neighbor(42,<sp/>Direction::NORTH_WEST);</highlight></codeline>
<codeline><highlight class="normal">Positions<sp/>jump_path<sp/>=<sp/>board.find_jump_path(42,<sp/>24);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>std::string<sp/>serialization</highlight></codeline>
<codeline><highlight class="normal">string<sp/>output<sp/>=<sp/>board.to_str();</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Game<sp/>logic<sp/>and<sp/>movement</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">All<sp/>game<sp/>variants<sp/>follow<sp/>exactly<sp/>same<sp/>game<sp/>rules.<sp/>From<sp/>[Wikipedia-Sokoban<sp/>rules],<sp/>classic<sp/>rules<sp/>of<sp/>Sokoban<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>The<sp/>game<sp/>is<sp/>played<sp/>on<sp/>a<sp/>board<sp/>of<sp/>squares,<sp/>where<sp/>each<sp/>square<sp/>is<sp/>a<sp/>floor<sp/>or<sp/>a<sp/>wall.<sp/>Some<sp/>floor<sp/>squares<sp/>contain<sp/>boxes,<sp/>and<sp/>some<sp/>floor<sp/>squares<sp/>are<sp/>marked<sp/>as<sp/>storage<sp/>locations.</highlight></codeline>
<codeline><highlight class="normal">&gt;</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>The<sp/>player<sp/>is<sp/>confined<sp/>to<sp/>the<sp/>board,<sp/>and<sp/>may<sp/>move<sp/>horizontally<sp/>or<sp/>vertically<sp/>onto<sp/>empty<sp/>squares<sp/>(never<sp/>through<sp/>walls<sp/>or<sp/>boxes).<sp/>The<sp/>player<sp/>can<sp/>also<sp/>move<sp/>into<sp/>a<sp/>box,<sp/>which<sp/>pushes<sp/>it<sp/>into<sp/>the<sp/>square<sp/>beyond.<sp/>Boxes<sp/>may<sp/>not<sp/>be<sp/>pushed<sp/>into<sp/>other<sp/>boxes<sp/>or<sp/>walls,<sp/>and<sp/>they<sp/>cannot<sp/>be<sp/>pulled.<sp/>The<sp/>number<sp/>of<sp/>boxes<sp/>is<sp/>equal<sp/>to<sp/>the<sp/>number<sp/>of<sp/>storage<sp/>locations.<sp/>The<sp/>puzzle<sp/>is<sp/>solved<sp/>when<sp/>all<sp/>boxes<sp/>are<sp/>at<sp/>storage<sp/>locations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Beside<sp/>classic<sp/>rules<sp/>of<sp/>games,<sp/>we<sp/>implement<sp/>two<sp/>rule<sp/>additions:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Multiban<sp/>-<sp/>we<sp/>allow<sp/>and<sp/>implement<sp/>more<sp/>than<sp/>one<sp/>pusher<sp/>per<sp/>board.<sp/>In<sp/>this<sp/>situation,<sp/>classic<sp/>rules<sp/>of<sp/>game<sp/>apply<sp/>to<sp/>each<sp/>of<sp/>the<sp/>pushers<sp/>on<sp/>board<sp/>with<sp/>additional<sp/>rule<sp/>that<sp/>*pusher<sp/>can&apos;t<sp/>move<sp/>through<sp/>another<sp/>pusher*</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>Reverse<sp/>mode<sp/>board<sp/>solving.<sp/>This<sp/>is<sp/>another<sp/>way<sp/>of<sp/>playing<sp/>game.<sp/>When<sp/>game<sp/>is<sp/>started,<sp/>box<sp/>and<sp/>goal<sp/>positions<sp/>are<sp/>switched<sp/>and<sp/>rules<sp/>of<sp/>game<sp/>are<sp/>slightly<sp/>modified:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>pusher<sp/>can<sp/>only<sp/>pull<sp/>boxes,<sp/>not<sp/>push<sp/>them</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>before<sp/>first<sp/>box<sp/>is<sp/>pulled<sp/>pusher<sp/>is<sp/>allowed<sp/>to<sp/>jump<sp/>to<sp/>any<sp/>empty<sp/>board<sp/>cell</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>when<sp/>boxes&apos;<sp/>and<sp/>goals&apos;<sp/>positions<sp/>are<sp/>switched,<sp/>pusher<sp/>may<sp/>end<sp/>up<sp/>standing<sp/>&quot;on<sp/>top&quot;<sp/>of<sp/>box<sp/>in<sp/>which<sp/>case<sp/>first<sp/>move<sp/>for<sp/>that<sp/>pusher<sp/>must<sp/>be<sp/>jump</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>-<sp/>jumping<sp/>after<sp/>first<sp/>pull<sp/>can<sp/>be<sp/>optionally<sp/>enabled<sp/>if<sp/>that<sp/>helps<sp/>searching<sp/>for<sp/>board<sp/>solution</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Class<sp/>responsible<sp/>for<sp/>implementing<sp/>all<sp/>movement<sp/>rules<sp/>is<sp/>`Mover`.<sp/>`Mover`<sp/>instance<sp/>is<sp/>attached<sp/>to<sp/>`VariantBoard`<sp/>instance<sp/>and<sp/>it<sp/>then<sp/>performs<sp/>movement<sp/>on<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Main<sp/>responsibilities<sp/>of<sp/>`Mover`<sp/>are:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>implement<sp/>all<sp/>game<sp/>rules<sp/>and<sp/>modes<sp/>of<sp/>playing</highlight></codeline>
<codeline><highlight class="normal">-<sp/>executes<sp/>pusher<sp/>and<sp/>box<sp/>movement<sp/>on<sp/>any<sp/>`VariantBoard`<sp/>instance</highlight></codeline>
<codeline><highlight class="normal">-<sp/>provides<sp/>single<sp/>step<sp/>undo/redo</highlight></codeline>
<codeline><highlight class="normal">-<sp/>echoes<sp/>performed<sp/>moves<sp/>(for<sp/>movement<sp/>display<sp/>in<sp/>rendering<sp/>engines).<sp/>This<sp/>is<sp/>especially<sp/>interesting<sp/>for<sp/>future<sp/>GUI<sp/>implementations.<sp/>To<sp/>understand<sp/>this<sp/>feature<sp/>better,<sp/>consider<sp/>following<sp/>sequence<sp/>of<sp/>moves:<sp/>`uuld`<sp/>(up,<sp/>up,<sp/>left,<sp/>down).<sp/>When<sp/>they<sp/>are<sp/>preformed,<sp/>`Mover`<sp/>echoes<sp/>`uuld`<sp/>which<sp/>can<sp/>be<sp/>then<sp/>rendered<sp/>by<sp/>ie.<sp/>GUI.<sp/>Now,<sp/>let&apos;s<sp/>say<sp/>we<sp/>want<sp/>to<sp/>undo<sp/>them.<sp/>We<sp/>tell<sp/>`Mover`<sp/>to<sp/>undo<sp/>these<sp/>moves<sp/>and<sp/>it<sp/>echoes<sp/>back<sp/>`urdd`<sp/>(up,<sp/>right,<sp/>down,<sp/>down)<sp/>which<sp/>is<sp/>straightforward<sp/>to<sp/>render<sp/>in<sp/>GUI.<sp/>Without<sp/>this<sp/>feature,<sp/>any<sp/>rendering<sp/>engine<sp/>would<sp/>have<sp/>to<sp/>actually<sp/>know<sp/>what<sp/>undo<sp/>of<sp/>moves<sp/>means<sp/>and<sp/>implement<sp/>correct<sp/>`undo`<sp/>of<sp/>performed<sp/>movement<sp/>making<sp/>it<sp/>(the<sp/>rendering<sp/>engine)<sp/>both<sp/>more<sp/>complex<sp/>and<sp/>redundant.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`Mover`<sp/>strives<sp/>to<sp/>be<sp/>fast<sp/>and<sp/>efficient<sp/>so<sp/>it<sp/>lacks<sp/>full<sp/>game<sp/>features<sp/>(like<sp/>infinite<sp/>undo/redo,<sp/>tracking<sp/>and<sp/>exporting<sp/>movement<sp/>history,<sp/>etc.).<sp/>It<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>by<sp/>future<sp/>full<sp/>game<sp/>implementations<sp/>and<sp/>solver<sp/>implementations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Examples<sp/>of<sp/>`Mover`<sp/>use:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Forward<sp/>solving<sp/>mode<sp/>is<sp/>default</highlight></codeline>
<codeline><highlight class="normal">SokobanBoard<sp/>board(42,<sp/>24);</highlight></codeline>
<codeline><highlight class="normal">Mover<sp/>mover(board);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Constructing<sp/>reverse<sp/>mover<sp/>switches<sp/>box<sp/>and<sp/>goal<sp/>positions<sp/>in<sp/>supplied<sp/>board</highlight></codeline>
<codeline><highlight class="normal">SokobanBoard<sp/>board2(42,<sp/>24);</highlight></codeline>
<codeline><highlight class="normal">Mover<sp/>mover2(board2,<sp/>SolvingMode::REVERSE);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>selecting<sp/>pusher<sp/>that<sp/>will<sp/>perform<sp/>next<sp/>move</highlight></codeline>
<codeline><highlight class="normal">mover.select_pusher(DEFAULT_PIECE_ID);</highlight></codeline>
<codeline><highlight class="normal">mover.select_pusher(DEFAULT_PIECE_ID<sp/>+<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Forward<sp/>mode:<sp/>move<sp/>selected<sp/>pusher<sp/>right<sp/>and<sp/>push<sp/>box<sp/>if<sp/>it<sp/>is<sp/>there</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Reverse<sp/>mode:<sp/>move<sp/>pusher<sp/>right<sp/>and<sp/>pull<sp/>box<sp/>with<sp/>it<sp/>if<sp/>box<sp/>is<sp/>there</highlight></codeline>
<codeline><highlight class="normal">mover.move(Direction::RIGHT);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Box<sp/>pulling<sp/>in<sp/>reverse<sp/>mode<sp/>can<sp/>be<sp/>enabled/disabled</highlight></codeline>
<codeline><highlight class="normal">mover.set_pulls_boxes(false);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>jump<sp/>selected<sp/>pusher<sp/>to<sp/>new<sp/>position</highlight></codeline>
<codeline><highlight class="normal">//<sp/>jumps<sp/>are<sp/>allowed<sp/>only<sp/>in<sp/>reverse<sp/>mode<sp/>and<sp/>only<sp/>before<sp/>first<sp/>box<sp/>pull</highlight></codeline>
<codeline><highlight class="normal">mover2.jump(42);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>echoing<sp/>performed<sp/>movement<sp/>for<sp/>rendering<sp/>engines</highlight></codeline>
<codeline><highlight class="normal">const<sp/>Mover::Moves&amp;<sp/>moves<sp/>=<sp/>mover.last_move();</highlight></codeline>
<codeline><highlight class="normal">mover.move(Direction::LEFT);</highlight></codeline>
<codeline><highlight class="normal">//<sp/>moves[0].direction()<sp/>==<sp/>Direction::LEFT</highlight></codeline>
<codeline><highlight class="normal">mover.undo_last_move();</highlight></codeline>
<codeline><highlight class="normal">//<sp/>moves[0].direction()<sp/>==<sp/>Direction::RIGHT;</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`Mover`<sp/>operates<sp/>directly<sp/>on<sp/>referenced<sp/>`VariantBoard`<sp/>so<sp/>that<sp/>instance<sp/>should<sp/>not<sp/>be<sp/>edited<sp/>outside<sp/>of<sp/>its<sp/>`Mover`.<sp/>For<sp/>the<sp/>same<sp/>reason,<sp/>it<sp/>is<sp/>not<sp/>allowed<sp/>to<sp/>attach<sp/>two<sp/>movers<sp/>to<sp/>same<sp/>game<sp/>board.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Piece<sp/>tracking,<sp/>position<sp/>hashing<sp/>and<sp/>victory<sp/>conditions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>allow<sp/>fast<sp/>pusher<sp/>and<sp/>box<sp/>positions<sp/>retrieval<sp/>and<sp/>tracking,<sp/>we<sp/>implement<sp/>cache<sp/>class<sp/>-<sp/>`BoardState`.<sp/>This<sp/>class<sp/>stores<sp/>positions<sp/>of<sp/>board<sp/>pieces,<sp/>and<sp/>allows<sp/>fast<sp/>update<sp/>and<sp/>retrieval<sp/>of<sp/>them.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">On<sp/>top<sp/>of<sp/>`BoardState`<sp/>we<sp/>implement<sp/>`HashedBoardState`.<sp/>Although<sp/>`Mover`<sp/>doesn&apos;t<sp/>need<sp/>board<sp/>hashing<sp/>in<sp/>any<sp/>way,<sp/>future<sp/>solver<sp/>implementations<sp/>will<sp/>need<sp/>it.<sp/>`HashedBoardState`<sp/>implements<sp/>Zobrist<sp/>hashing<sp/>of<sp/>current<sp/>positions<sp/>of<sp/>pushers<sp/>and<sp/>boxes.<sp/>This<sp/>can<sp/>then<sp/>be<sp/>used<sp/>by<sp/>solvers<sp/>to<sp/>implement<sp/>and<sp/>speed<sp/>up<sp/>game-space<sp/>searches<sp/>by<sp/>storing<sp/>visited<sp/>board<sp/>hashes<sp/>in<sp/>cache<sp/>tables<sp/>while<sp/>performing<sp/>game-space<sp/>search.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>`Mover`<sp/>is<sp/>attached<sp/>to<sp/>`VariantBoard`<sp/>it<sp/>also<sp/>creates<sp/>fresh<sp/>instance<sp/>of<sp/>`HashedBoardState`<sp/>and<sp/>keeps<sp/>it<sp/>up<sp/>to<sp/>date<sp/>with<sp/>current<sp/>board<sp/>position.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`BoardState`<sp/>also<sp/>implements<sp/>checking<sp/>of<sp/>victory<sp/>conditions.<sp/>There<sp/>are<sp/>two<sp/>main<sp/>groups<sp/>of<sp/>those:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Classic<sp/>victory<sp/>where<sp/>any<sp/>position<sp/>in<sp/>which<sp/>each<sp/>box<sp/>is<sp/>positioned<sp/>on<sp/>top<sp/>of<sp/>some<sp/>goal</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>Sokoban+<sp/>victory<sp/>condition<sp/>where<sp/>each<sp/>box<sp/>is<sp/>positioned<sp/>on<sp/>top<sp/>of<sp/>goal<sp/>with<sp/>the<sp/>same<sp/>id<sp/>as<sp/>that<sp/>box</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Sokoban+<sp/>is<sp/>optional<sp/>feature<sp/>that<sp/>can<sp/>be<sp/>enabled<sp/>by<sp/>assigning<sp/>`boxorder`<sp/>and<sp/>`goalorder`<sp/>sequences<sp/>to<sp/>board.<sp/>When<sp/>these<sp/>sequences<sp/>are<sp/>present,<sp/>new<sp/>victory<sp/>conditions<sp/>are<sp/>activated.<sp/>For<sp/>example,<sp/>having<sp/>board<sp/>with<sp/>five<sp/>boxes,<sp/>we<sp/>could<sp/>assign<sp/>these<sp/>sequences:<sp/>`1<sp/>1<sp/>2<sp/>2<sp/>3`<sp/>and<sp/>`2<sp/>1<sp/>3<sp/>1<sp/>2`.<sp/>After<sp/>that,<sp/>board<sp/>is<sp/>considered<sp/>solved<sp/>only<sp/>when<sp/>boxes<sp/>with<sp/>ID<sp/>1<sp/>are<sp/>a<sp/>pushed<sp/>onto<sp/>goals<sp/>with<sp/>ID<sp/>1<sp/>etc...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Game<sp/>snapshots<sp/>and<sp/>movement<sp/>recording</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Each<sp/>step<sp/>of<sp/>each<sp/>pusher<sp/>is<sp/>recorded<sp/>by<sp/>instance<sp/>of<sp/>`AtomicMove`.<sp/>Sequence<sp/>of<sp/>`AtomicMove`<sp/>is<sp/>implemented<sp/>in<sp/>`Snapshot`.<sp/>Just<sp/>like<sp/>`VariantBoard`,<sp/>`Snapshot`<sp/>is<sp/>serializable<sp/>to<sp/>`std::string`.<sp/>Traditional<sp/>snapshots<sp/>string<sp/>format<sp/>is<sp/>extended<sp/>to<sp/>support<sp/>recording<sp/>of<sp/>jumps<sp/>and<sp/>selecting<sp/>of<sp/>different<sp/>pushers<sp/>in<sp/>`Multiban`<sp/>boards,<sp/>again<sp/>following<sp/>`SokobanYASC`<sp/>`.sok`<sp/>format<sp/>specification.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Troubleshooting,<sp/>issues<sp/>and<sp/>bugs</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Pull<sp/>requests<sp/>and<sp/>issue<sp/>reports<sp/>are<sp/>welcome<sp/>and<sp/>greatly<sp/>appreciated.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[SokobanYASC]:http://sourceforge.net/projects/sokobanyasc/</highlight></codeline>
<codeline><highlight class="normal">[JSoko]:http://www.sokoban-online.de/</highlight></codeline>
<codeline><highlight class="normal">[MazezaM]:http://webpages.dcu.ie/~tyrrelma/MazezaM/</highlight></codeline>
<codeline><highlight class="normal">[bandit]:http://banditcpp.org/</highlight></codeline>
<codeline><highlight class="normal">[boost]:http://www.boost.org/</highlight></codeline>
<codeline><highlight class="normal">[CMake]:http://www.cmake.org</highlight></codeline>
<codeline><highlight class="normal">[Doxygen]:http://www.stack.nl/~dimitri/doxygen/</highlight></codeline>
<codeline><highlight class="normal">[pybind11]:<sp/>https://github.com/pybind/pybind11</highlight></codeline>
<codeline><highlight class="normal">[Wikipedia-Sokoban<sp/>rules]:<sp/>https://en.wikipedia.org/wiki/Sokoban#Rules</highlight></codeline>
    </programlisting>
    <location file="/home/tomislav/dev/sokoban/sokoenginepy/lib/libsokoengine/README.md"/>
  </compounddef>
</doxygen>
